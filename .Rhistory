dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.4)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
?rgl::rgl
?dne
devtools::release()
release()
usethis::use_release_issue()
n
no
usethis::use_release_issue()
no
usethis::use_release_issue()
?doolkit
?`rgl-package`
?rgl
?molaR
?molaR::molaR
usethis::use_release_issue()
usethis::use_readme_md()
usethis::use_readme_rmd()
library(doolkit)
?dkmap
dkmap(dkpongo$OES, doolkit::dne(dkpongo$OES), col = "dne", legend.lab = "DNE")
dkmap(dkpongo$OES, doolkit::dne(dkpongo$OES), col = "dne", legend.lab = "DNE", legend.type = "log")
library(doolkit)
library(doolkit)
dkmap(dkpongo$OES, slope(dkpongo$OES))
library(doolkit)
dkmap(dkpongo$OES, slope(dkpongo$OES))
dkmap(dkpongo$OES, angularity(dkpongo$OES, ratio = TRUE))
dkmap(dkpongo$OES, angularity(dkpongo$OES, ratio = TRUE))
library(doolkit)
dkmap(dkpongo$OES, angularity(dkpongo$OES, ratio = TRUE))
library(doolkit)
dkmap(dkpongo$OES, elev(dkpo,go$OES))
dkmap(dkpongo$OES, elev(dkpongo$OES))
# Options
# ...Legend
if(legend == TRUE) {
if(legend.type == "stack"){
plotx <- c(3, rep(0, col.levels*100))
ploty <- c(min(Levels), seq(min(Levels), max(Levels), length.out = col.levels*100))
# ...function to make the bg
bg.make <- function(){
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + cex.lab + cex.axis, 3 + cex.main, 0))
graphics::plot(x = plotx, y = ploty, pch = 95, bty = "n", xaxs = "r", xaxt = "n",
col = c("transparent", rep(Colpalette, each = 100)),
xlab = "", ylab = legend.lab, main = main, sub = sub,
col.main = col.main, col.axis = col.axis, col.lab = col.lab, col.sub = col.sub,
cex = cex, cex.main = cex.main, cex.axis = cex.axis, cex.sub = cex.sub, cex.lab = cex.lab,
family = family, font.main = font.main, font.axis = font.axis)
}
rgl::bgplot3d(bg.make())
}
if(legend.type == "log"){
plotx <- c(3, rep(0, col.levels*100))
ploty <- c(min(Levels), seq(min(Levels), max(Levels), length.out = col.levels*100))
# ...function to make the bg
bg.make <- function(){
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + cex.lab + cex.axis, 3 + cex.main, 0), ylog = TRUE)
graphics::plot(x = plotx, y = ploty, pch = 95, bty = "n", xaxs = "r", xaxt = "n",
col = c("transparent", rep(Colpalette, each = 100)),
xlab = "", ylab = paste("log(", legend.lab, ")", sep = ""), main = main, sub = sub,
col.main = col.main, col.axis = col.axis, col.lab = col.lab, col.sub = col.sub,
cex = cex, cex.main = cex.main, cex.axis = cex.axis, cex.sub = cex.sub, cex.lab = cex.lab,
family = family, font.main = font.main, font.axis = font.axis)
}
rgl::bgplot3d(bg.make())
}
if(legend.type == "pie"){
ploty <- rep(1, col.levels)
# ...function to make the bg
bg.make <- function(){
#... title
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + (3 * cex), 3 + cex.main, 0), plt = c(0.15, 0.85, 0.15, 0.85))
graphics::plot(1, 1, col = "white", main = main, font.main = font.main, cex.main = cex.main, col.main = col.main,
sub = sub, font.sub = font.sub, cex.sub = cex.sub, col.sub = col.sub,
family = family, xaxt = "n", yaxt = "n", bty = "n")
#... piechart (just colors, without labels)
graphics::par(plt = c(0.05, 0.2, 0.4, 0.6), new = TRUE)
graphics::pie(ploty, labels = "", col = Colpalette, border = col.axis,
clockwise = TRUE, radius = 0.6)
#... labels
graphics::par(plt = c(0.05, 0.2, 0.4, 0.6), new = TRUE)
graphics::pie(ploty, labels = round(seq(min(y), max(y), length.out = col.levels + 1), 0), init.angle = 90 + (360 / (2 * col.levels)),
clockwise = TRUE, radius = 0.8, col = "transparent", border = "transparent",
main = legend.lab, family = family, cex = cex, tck = NA,
font.main = font.lab, font.axis = font.axis,
cex.main = cex.lab, cex.axis = cex.axis,
col.main = col.lab, col.axis = col.axis)
}
rgl::bgplot3d(bg.make())
}
}
library(doolkit)
dkmap(dkpongo$OES, elev(dkpongo$OES))
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", alpha = 0.5)
# ...3dmap
rgl::shade3d(mesh, alpha = alpha.tmp, color = col.tmp, meshColor = "faces", ptsize = 3, shininess = 0, smooth = smooth, lit = FALSE, ambient = "grey50")
library(doolkit)
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", alpha = 0.5)
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", alpha = 0.5)
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev")
plot(c(1:10), c(1:10), bg = "black")
plot(c(1:10), c(1:10))
par(bg = "black")
plot(c(1:10), c(1:10))
plot(c(1:10), c(1:10), col = "red")
plot(c(1:10), c(1:10), col = "red", lcol = "white")
par(bg = "black", fg = "white")
plot(c(1:10), c(1:10), col = "red")
plot(c(1:10), c(1:10), col = "red", colkey = list(col.axis = "white", col.clab = "white"))
plot(c(1:10), c(1:10), col = "red", col.axis = "white", col.clab = "white")
plot(c(1:10), c(1:10), col = "red", col.axis = "white", col.clab = "white", col.main = "white")
plot(c(1:10), c(1:10), col = "red", col.axis = "white", col.clab = "white", col.main = "white", main = "Title")
plot(c(1:10), c(1:10), col = "red", col.axis = "white", col.clab = "white", col.main = "white", main = "Title", col.sub = "white", sub = "subtitle")
library(doolkit)
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev")
#'
#' #Map of Dirichlet normal energy:
#' dne <- dne(dkmodel$complex)
#' dkmap(dkmodel$complex, dne, col = "dne", legend.lab = "DNE",
#' legend.type = "log", orient = "occlusal")
#'
#' #Map of 3d-Area of polygons (for surface checking):
#' dkmap(dkmodel$complex, Rvcg::vcgArea(dkmodel$complex, perface = TRUE)$pertriangle,
#' legend.lab = "3d Area (mm\U00B2)", orient = "occlusal")
#' @export
dkmap <- function(mesh, y,  alpha = 1, alpha.above = TRUE, alpha.faces = NULL, alpha.thresh = NULL,
bg = "white", col = "slope", col.levels = 100, col.main = "black", col.lab = "black", col.sub = "black", col.axis = "black",
max.range = NULL, min.range = NULL, lit = TRUE,
cex = 2, cex.axis = 2, cex.main = 4, cex.sub = 3, cex.lab = 2,
family = "sans", font.axis = 1, font.lab = 2, font.main = 3, font.sub = 2, main = "", sub = "",
legend = TRUE, legend.lab = "y", legend.type = "stack", windowRect = NULL,
orient = "current", bbox = FALSE, origin = TRUE, scalebar = FALSE, smooth = TRUE){
# Perform various checks:
if (!isa(mesh, what = "mesh3d")) stop("mesh must be an object of class 'mesh3d'")
if (class(y) != "numeric" | !is.vector(y)) stop("y must be a numeric vector")
if (!is.null(alpha.faces) & !is.null(alpha.thresh)) stop("use either alpha.faces or alpha.thresh")
if (!is.null(alpha.faces) & (class(alpha.faces) != "integer" | !is.vector(alpha.faces))) stop("alpha.faces must be a vector of integers")
# Define colors
Colrange <- col
if (isTRUE(Colrange == "angularity")) Colrange <- c("white", "black")
if (isTRUE(Colrange == "arc")) Colrange <- c("royalblue", "white", "red")
if (isTRUE(Colrange == "dne")) Colrange <- c("royalblue", "lightskyblue", rep("olivedrab3", 3), "yellow1", "orange", "red")
if (isTRUE(Colrange == "elev")) Colrange <- c("lightgreen","goldenrod1","yellow1","white","white","lightskyblue","dodgerblue4","royalblue")
if (isTRUE(Colrange == "inclin")) Colrange <- c("firebrick4","red","orangered","orange","yellow1","olivedrab3","lightseagreen","royalblue","royalblue4","royalblue","lightseagreen","olivedrab3","yellow1","orange","orangered","red","firebrick4")
if (isTRUE(Colrange == "oedist")) Colrange <- c("blue","green","yellow","orange","red")
if (isTRUE(Colrange == "opc")) Colrange <- c("dodgerblue4","lightskyblue","sienna4","yellow1","red3","plum1","darkgreen","olivedrab3")
if (isTRUE(Colrange == "opcr")) Colrange <- c("dodgerblue4","lightskyblue","sienna4","yellow1","red3","plum1","darkgreen","olivedrab3")
if (isTRUE(Colrange == "orient")) Colrange <- c("dodgerblue4","lightskyblue","sienna4","yellow1","red3","plum1","darkgreen","olivedrab3")
if (isTRUE(Colrange == "slope")) Colrange <- c("royalblue4","royalblue","lightseagreen","olivedrab3","yellow1","orange","orangered","red","firebrick4")
# ...log transformation if legend type "log"
if(legend.type == "log"){
y <- log(y)
#round -Inf and NA values to the lowest finite value
y[!is.finite(y)] <- min(y[is.finite(y)])
}
# ...Define color palette of length = col.levels within col
Colpalette <- grDevices::colorRampPalette(Colrange)(col.levels)
# ...Define n = col.levels incremential levels for y
y.min <- min(y)
y.max <- max(y)
if (!is.null(min.range)) y.min <- min.range
if (!is.null(max.range)) y.max <- max.range
Levels <- seq(y.min, y.max, length.out = col.levels + 1)
# ...Assign a color of Colpalette to each polygon based on y level
col.tmp <- c(1:length(y))
for (i in c(1:col.levels)){
col.tmp[y >= Levels[i]] <- Colpalette[i]
}
# Define alpha-ed faces
# ...by default, to.alpha = no faces
to.alpha <- c(1:Rvcg::nfaces(mesh))
if (!is.null(alpha.faces)) to.alpha <- alpha.faces
if (!is.null(alpha.thresh) & alpha.above == TRUE) to.alpha <- which(y > alpha.thresh)
if (!is.null(alpha.thresh) & alpha.above == FALSE) to.alpha <- which(y < alpha.thresh)
alpha.tmp <- rep(1, length(y))
alpha.tmp[to.alpha] <- alpha
# Populate the rgl window with the map
# ...Clear the rgl window, resize it
rgl::clear3d()
if (!is.null(windowRect)) rgl::par3d(windowRect = windowRect)
else if (rgl::par3d()$viewport[3] < 800 | rgl::par3d()$viewport[4] < 600) rgl::par3d(windowRect = c(20, 20, 1020, 820))
# ...Set back origin to 0
if (origin) {
mesh <- doolkit::dkorigin(mesh)
}
# ...3dmap
rgl::shade3d(mesh, alpha = alpha.tmp, color = col.tmp, meshColor = "faces", ptsize = 3, shininess = 0, smooth = smooth, lit = lit)
if (lit) {
# Light: 3 points lightning (https://fr.wikipedia.org/wiki/%C3%89clairage_trois_points)
rgl::rgl.clear("lights") #sets the lights off
##key light
rgl::light3d(specular = "black", diffuse = "grey50", ambient = "grey50", theta = 330, phi = 330)
##fill light
rgl::light3d(specular = "black", diffuse = "grey60", ambient = "grey60", theta = 60, phi = 330)
##back light
rgl::light3d(specular = "black", diffuse = "grey75", ambient = "grey50", theta = 315, phi = 45)
}
# Options
# ...Legend
if (legend == TRUE) {
if (legend.type == "stack") {
plotx <- c(3, rep(0, col.levels*100))
ploty <- c(min(Levels), seq(min(Levels), max(Levels), length.out = col.levels*100))
# ...function to make the bg
bg.make <- function(){
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + cex.lab + cex.axis, 3 + cex.main, 0), bg = bg)
graphics::plot(x = plotx, y = ploty, pch = 95, bty = "n", xaxs = "r", xaxt = "n",
col = c("transparent", rep(Colpalette, each = 100)),
xlab = "", ylab = legend.lab, main = main, sub = sub,
col.main = col.main, col.axis = col.axis, col.lab = col.lab, col.sub = col.sub,
cex = cex, cex.main = cex.main, cex.axis = cex.axis, cex.sub = cex.sub, cex.lab = cex.lab,
family = family, font.main = font.main, font.axis = font.axis)
}
rgl::bgplot3d(bg.make())
}
if(legend.type == "log"){
plotx <- c(3, rep(0, col.levels*100))
ploty <- c(min(Levels), seq(min(Levels), max(Levels), length.out = col.levels*100))
# ...function to make the bg
bg.make <- function(){
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + cex.lab + cex.axis, 3 + cex.main, 0), ylog = TRUE, bg = bg)
graphics::plot(x = plotx, y = ploty, pch = 95, bty = "n", xaxs = "r", xaxt = "n",
col = c("transparent", rep(Colpalette, each = 100)),
xlab = "", ylab = paste("log(", legend.lab, ")", sep = ""), main = main, sub = sub,
col.main = col.main, col.axis = col.axis, col.lab = col.lab, col.sub = col.sub,
cex = cex, cex.main = cex.main, cex.axis = cex.axis, cex.sub = cex.sub, cex.lab = cex.lab,
family = family, font.main = font.main, font.axis = font.axis)
}
rgl::bgplot3d(bg.make())
}
if(legend.type == "pie"){
ploty <- rep(1, col.levels)
# ...function to make the bg
bg.make <- function(){
#... title
oldpar <- graphics::par(no.readonly = TRUE)
on.exit(graphics::par(oldpar))
graphics::par(mar = c(3 + cex.sub, 3 + (3 * cex), 3 + cex.main, 0), plt = c(0.15, 0.85, 0.15, 0.85), bg = bg)
graphics::plot(1, 1, col = "white", main = main, font.main = font.main, cex.main = cex.main, col.main = col.main,
sub = sub, font.sub = font.sub, cex.sub = cex.sub, col.sub = col.sub,
family = family, xaxt = "n", yaxt = "n", bty = "n")
#... piechart (just colors, without labels)
graphics::par(plt = c(0.05, 0.2, 0.4, 0.6), new = TRUE)
graphics::pie(ploty, labels = "", col = Colpalette, border = col.axis,
clockwise = TRUE, radius = 0.6)
#... labels
graphics::par(plt = c(0.05, 0.2, 0.4, 0.6), new = TRUE)
col.bins <- function(col.levels) {
if (col.levels < 11) Length <- col.levels + 1
else if (col.levels + 1 > 11) Length <- 11
return(Length)
}
graphics::pie(ploty, labels = round(seq(min(y), max(y), length.out = col.bins), 0), init.angle = 90 + (360 / (2 * col.levels)),
clockwise = TRUE, radius = 0.8, col = "transparent", border = "transparent",
main = legend.lab, family = family, cex = cex, tck = NA,
font.main = font.lab, font.axis = font.axis,
cex.main = cex.lab, cex.axis = cex.axis,
col.main = col.lab, col.axis = col.axis)
}
rgl::bgplot3d(bg.make())
}
}
else if (legend == FALSE) rgl::bgplot3d(NULL)
#....3d view orientation
if(orient == "occlusal" | orient == "mesial" | orient == "distal" | orient == "left" | orient == "right") {
doolkit::dksetview(orient = orient)
}
if(orient != "current" & orient != "occlusal" & orient != "mesial" & orient != "distal" & orient != "left" & orient != "right") {
print(paste("Warning: 'orient' argument must be of type c('current', 'distal', 'left', 'mesial', 'occlusal', 'right'); orient set to 'current'"))
}
#....Scalebar
if(scalebar == TRUE) rgl::axes3d(c("x--", "y--", "z--"))
else if(scalebar == FALSE)  rgl::axes3d(NULL)
#....Bounding box
if(bbox == TRUE) rgl::axes3d(edges = "bbox", labels = FALSE, tick = FALSE, box = TRUE, expand = 1, col = c("tan3", "white"))
# The final step is setting the parallax to 0:
rgl::par3d(FOV = 0)
}
library(doolkit)
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev")
warnings
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", lit = FALSE, bg = "black")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", lit = FALSE, bg = "black")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", lit = FALSE, bg = "dimgrey")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", lit = FALSE, bg = "grey")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "elev", lit = FALSE, bg = "dimgrey")
dkmap(dkpongo$OES, elev(dkpongo$OES), col = "slope", lit = FALSE, bg = "dimgrey")
library(doolkit)
shiny::runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
shiny::runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('test_button')
runApp('test_button')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp()
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
install.packages("webshot2")
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
runApp('C:/Users/Ghislain/Desktop/doolkit_shiny/doolkit')
dkmap(dkpongo$OES, elev(dkpongo$OES))
options(rgl.useNULL = TRUE)
dkmap(dkpongo$OES, elev(dkpongo$OES))
options(rgl.useNULL = FALSE)
dkmap(dkpongo$OES, elev(dkpongo$OES))
library(rgl)
dkmap(dkpongo$OES, elev(dkpongo$OES))
library(rgl, useNULL = FALSE)
library(rgl)
dkmap(dkpongo$OES, elev(dkpongo$OES))
options(rgl.inShiny = FALSE)
dkmap(dkpongo$OES, elev(dkpongo$OES))
library(rgl)
dkmap(dkpongo$OES, elev(dkpongo$OES))
install.packages('doolkit')
install.packages("doolkit")
remove.packages('Rvcg')
remove.packages('doolkit')
install.packages(doolkit)
install.packages("doolkit")
install.packages("doolkit")
t <- doolkit::dkmodel$complex
mean(doolkit::arc(t))
max(doolkit::arc(t))
min(doolkit::arc(t))
str (t)
tt <- t
tt$normals <- null
tt$normals <- ""
is.null(tt$normals)
tt <- t
tt$normals <- NULL
is.null(tt$normals)
mean(angularity(tt))
mean(doolkit::angularity(tt))
tt$normals <- Rvcg::vcgUpdateNormals(tt)$normals
mean(doolkit::angularity(tt))
??arc
?doolkit::arc
surf <- doolkit::dkpongo$OES
dne1 <- doolkit::dne(surf, total = TRUE)
install.packages('molaR')
dne2 <- molaR::DNE(surf)
library(doolkit)
dne1 <- doolkit::dne(surf, total = TRUE)
surf <- Rvcg::vcgImport(choose.files())
dne1 <- doolkit::dne(surf, total = TRUE)
dne2 <- molaR::DNE(surf)
library(doolkit)
dne1 <- doolkit::dne(surf, total = TRUE)
dne1 <- dne(surf, total = TRUE)
dnetest <- function(mesh, range = 0.999, total = FALSE){
# Perform various checks:
if (class(mesh) != "mesh3d") stop("mesh must be an object of class 'mesh3d'")
#if (is.null(mesh$normals)) -> apparently this should always be done?
mesh <- Rvcg::vcgUpdateNormals(mesh, type = 0, silent = TRUE)
# Main job
Dne <- NULL
for (i in 1:length(mesh$it[1, ])){
N1T <- mesh$vb[1:3, mesh$it[1, i]]
N2T <- mesh$vb[1:3, mesh$it[2, i]]
N3T <- mesh$vb[1:3, mesh$it[3, i]]
NN1T <- mesh$normals[, mesh$it[1, i]]
NN2T <- mesh$normals[, mesh$it[2, i]]
NN3T <- mesh$normals[, mesh$it[3, i]]
U <- c(N2T[1]-N1T[1], N2T[2]-N1T[2], N2T[3]-N1T[3])
V <- c(N3T[1]-N1T[1], N3T[2]-N1T[2], N3T[3]-N1T[3])
NU <- c(NN2T[1]-NN1T[1], NN2T[2]-NN1T[2], NN2T[3]-NN1T[3])
NV <- c(NN3T[1]-NN1T[1], NN3T[2]-NN1T[2], NN3T[3]-NN1T[3])
UU <- U%*%U
UV <- U%*%V
VV <- V%*%V
NUNU <- NU%*%NU
NUNV <- NU%*%NV
NVNV <- NV%*%NV
G <- matrix(c(UU, UV, UV, VV), nrow = 2, ncol = 2, byrow = TRUE)
H <- matrix(c(NUNU, NUNV, NUNV, NVNV), nrow = 2, ncol = 2, byrow = TRUE)
Dne[i] <- round(sum(diag(MASS::ginv(G)%*%H)), 1)
}
# ...Set border values to 0
Dne[doolkit::dkborder(mesh)] <- 0
# ...Set values out of range to 0
Dne[Dne >= stats::quantile(Dne, range)] <- 0
# ...Return vector (if total = FALSE) or single value (if total = TRUE)
if(!total) return(Dne)
if(total) return(round(sum(Dne * Rvcg::vcgArea(mesh, perface = TRUE)$pertriangle), 3))
}
dne3 <- dnetest(surf, total = TRUE)
areas <- Rvcg::vcgArea(surf, perface = TRUE)$pertriangle
dne3 <- dnetest(surf, total = FALSE)
summary(dne2$Face_Values$Dirichlet_Energy_Densities)
summary(dne3)
?molaR::DNE
library(doolkit)
dne4 <- dne(surf, total = TRUE)
length(dkborder(surf))
?dkborder
# Map the border in orange:
is_border <- rep(1, Rvcg::nfaces(dkmodel$cusp))
is_border[border] <- 2
border <- dkborder(surf)
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE)
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE, smooth = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
vcgborder <- which(Rvcg::vcgBorder(surf)$borderit == TRUE)
is_border[vcgborder] <- 3
dkmap(surf, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE, smooth = FALSE)
length(vcgborder)
surf <- doolkit::dkpongo$OES
dne2 <- molaR::DNE(surf)
length(dkborder(surf))
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE, smooth = FALSE)
border <- dkborder(surf)
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE, smooth = FALSE)
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE, smooth = FALSE)
is_border <- rep(1, Rvcg::nfaces(surf))
is_border[border] <- 2
dkmap(surf, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE, smooth = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
vcgborder <- which(Rvcg::vcgBorder(surf)$borderit == TRUE)
is_border[vcgborder] <- 3
dkmap(surf, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE, smooth = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
vcgborder <- which(Rvcg::vcgBorder(surf)$borderit == TRUE)
is_border[vcgborder] <- 3
dkmap(surf, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE, smooth = FALSE)
length(vcgborder)
dne(surf, total = TRUE)
molaR::DNE3d(dne2)
?molaR::DNE3d
library(doolkit)
roxygen2::roxygenize
roxygen2::roxygenize()
roxygen2::roxygenize()
library(doolkit)
.Platform$OS.type
?.Platform$OS.type
library(doolkit)
install.packages("rgl")
install.packages("rgl")
?rgl::viewpoint
?rgl::view3d
inclinCusp <- inclin(dkmodel$cusp)
inclinCusp <- doolkit::inclin(dkmodel$cusp)
inclinCusp <- doolkit::slope(dkmodel$cusp)
inclinCusp <- doolkit::slope(doolkit::dkmodel$cusp)
?doolkit
test <- doolkit::dkmodel$cusp
install.packages("htmltools")
test <- doolkit::dkmodel$cusp
remove.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
library(htmltools)
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
install.packages('doolkit')
inclinCusp <- inclin(dkmodel$cusp)
inclinCusp <- doolkit::inclin(doolkit::dkmodel$cusp)
doolkit::dkmap(doolkit::dkmodel$cusp, inclinCusp, col = "inclin", min.range = 0, max.range = 180)
rgl::view3d()
inclinCusp <- doolkit::arc(doolkit::dkmodel$cusp)
mean(inclinCusp)
library(doolkit)
sessionInfo()
packageDescription("Rvcg")$Repository
library(doolkit)
