m2 <- lm(elev~arc, data = dd)
cor.test(x = m1$residuals, y = m2$residuals)
plot(x = m1$residuals, y = m2$residuals)
m1 <- lm(thickn~elev, data = dd)
m2 <- lm(arc~elev, data = dd)
cor.test(x = m1$residuals, y = m2$residuals)
plot(x = m1$residuals, y = m2$residuals)
m1 <- lm(log(thickn)~elev, data = dd)
m2 <- lm(log(arc)~elev, data = dd)
cor.test(x = m1$residuals, y = m2$residuals)
plot(x = m1$residuals, y = m2$residuals)
?lm
plot(m1)
plot(log(thickn), elev)
plot(log(thickn), exp(elev)
)
plot(log(thickn), log(elev))
plot(thickn, log(elev))
plot(thickn, exp(elev))
plot(thickn, sqrt(elev))
plot(thickn, elev)
plot(elev, thickn)
plot(elev, exp(thickn))
plot(elev, thickn*elev)
plot(elev, thickn/elev)
plot(elev, thickn*elev)
plot(elev, log(thickn*elev))
plot(elev, thickn*elev)
plot(elev, thickn+elev)
plot(thickness*elev, thickn)
plot(thickn*elev, thickn)
plot(arc*elev, arc)
plot(abs(arc*elev), arc)
plot(arc*elev, arc)
plot(abs(arc*elev), arc)
plot(abs(arc)*elev, arc)
plot(arc+elev, arc)
plot(elev, arc)
plot(elev/max(elev), arc)
cor.test(x = elev, y = arc, data = dd)
plot(elev, log(arc))
plot(elev, exp(arc))
plot(elev, 10^arc)
plot(elev, exp(arc))
plot(elev, log(arc-min(arc)))
gor <- Rvcg::vcgImport(choose.files())
pon <- gor
rm(gor)
doolkit::dkmap(pon, doolkit::elev(pon), col = "elev")
doolkit::dkmap(pon, doolkit::elev(pon), col = "elev", legend.lab = "Elevation (mm)")
for (i in 1:90) {
view3d(userMatrix=rotationMatrix(2*pi * i/90, 1, -1, -1))
rgl.snapshot(filename=paste("animation/frame-",
sprintf("%03d", i), ".png", sep=""))
}
?sprintf
?view3d
for (i in 1:90) {
rgl::view3d(userMatrix=rotationMatrix(2*pi * i/90, 1, -1, -1))
rgl::rgl.snapshot(filename=paste("animation/frame-",
sprintf("%03d", i), ".png", sep=""))
}
?rotationMatrix
for (i in 1:90) {
rgl::view3d(userMatrix=rgl::rotationMatrix(2*pi * i/90, 1, -1, -1))
rgl::rgl.snapshot(filename=paste("animation/frame-",
sprintf("%03d", i), ".png", sep=""))
}
warnings()
rgl::viewpoint(userMatrix = matrix(2*pi * i/90, 1, -1, -1, ncol = 4))
rgl::view3d(userMatrix = matrix(2*pi * i/90, 1, -1, -1, ncol = 4))
rgl::view3d(userMatrix = list(2*pi * i/90, 1, -1, -1, ncol = 4))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 1, -1, -1, ncol = 4))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 2, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 2, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, 1, -0.5, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 0, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -2, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -2, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -5, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -65, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -65, -120))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -120, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 120, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 360, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 2, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 4, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 10, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, 4, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 1, 0, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 50, 0, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 50, 50, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 50, 100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 100, 100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -100, 100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -200, 100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -300, 100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -300, -100, 50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -300, -100, -50))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -300, -100, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -1000, -100, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -1000, -1000, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -1000, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, 20, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -20, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -21, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -22, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -30, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -40, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -50, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -90, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -180, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -1800, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -20000000, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -2, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 3/90, -10, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 1/90, -10, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 5/90, -10, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 5/90, -1, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 5/90, -1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 6/90, -1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 6/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 16/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 16/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 16/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 6/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 16/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, -1, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, -1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 1, 0, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, -2))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, -90))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 0, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, 0, 1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, -1, 1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 26/90, -1, 1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 36/90, -1, 1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 36/90, 1, 1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 36/90, -1, -1, 1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 36/90, -1, 1, 0))
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90, 1, -1, -1), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
doolkit::dkmap(pon, doolkit::elev(pon), col = "elev", legend.lab = "Elevation (mm)")
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 36/90, -1, 1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 90/90, -1, 1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, -1, 1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, -1, -1, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, -1, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, 2*pi * 45/90, -1, -1))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, 2*pi * 45/90, 2*pi * 45/90, 2*pi * 45/90))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, 2*pi * 45/90, 2*pi * 45/90, 0))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, 2*pi * 45/90, 0, 2*pi * 45/90))
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * 45/90, -1, 2*pi * 45/90, 2*pi * 45/90))
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
-1,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
-1,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
0,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
0,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
1,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
1,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
doolkit::dkmap(pon, doolkit::elev(pon), col = "elev", legend.lab = "Elevation (mm)")
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
1,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
2*pi * i/90,
-1,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
2*pi * i/90,
-2*pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(1,
2*pi * i/90,
-2*pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(pi * i/90,
2*pi * i/90,
-2*pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
pi * i/90,
pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
pi * i/90,
pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
pi * i/90,
pi * i/90,
pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:90) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2*pi * i/90,
2*pi * i/90,
pi * i/90,
2*pi * i/90), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
?doolkit::angularity
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("red", "purple", "indigo", "royalblue", "cyan", "green", "yellow"))
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("red", "purple", "royalblue", "cyan", "green", "yellow"))
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("red", "purple", "royalblue", "cyan", "green", "yellow"))
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("yellow", "green", "cyan", "royalblue", "purple", "red"))
pon <- Rvcg::vcgImport(choose.files())
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("yellow", "green", "cyan", "royalblue", "purple", "red"))
pon <- Rvcg::vcgImport(choose.files())
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 9,
col = c("yellow", "green", "cyan", "royalblue", "purple", "red"))
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 256,
col = c("yellow", "green", "cyan", "royalblue", "purple", "red"), legend = FALSE)
for (i in 1:45) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2 * pi * 2 * i /90, 2 * pi * 2 * i /90,
2 * pi * i/90, 2 * pi * 2 * i /90,), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
for (i in 1:45) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2 * pi * 2 * i /90, 2 * pi * 2 * i /90,
2 * pi * i/90, 2 * pi * 2 * i /90,), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-",
sprintf("%03d", i), ".png", sep = ""))
}
doolkit::dkmap(pon, doolkit::slope(pon), legend.lab = "Elevation (mm)", col.levels = 256,
col = c("yellow", "green", "cyan", "royalblue", "purple", "red"), legend = FALSE)
for (i in 1:45) {
rgl::view3d(userMatrix = rgl::rotationMatrix(2 * pi * 2 * i /90, 2 * pi * 2 * i /90,
2 * pi * i/90, 2 * pi * 2 * i /90,), fov = 0)
rgl::rgl.snapshot(filename = paste("animation/frame-", sprintf("%03d", i), ".png", sep = ""))
}
library(doolkit)
?area2d
x <- dkpongo$OES
FootprintVerts <- t(x$vb[1:2, ])
Hull <- grDevices::chull(x = FootprintVerts[, 1], y = FootprintVerts[, 2])
plot(x$vb[1, ], x$vb[2, ], xlab = "x", ylab = "y")
points(x$vb[1, Hull], x$vb[2, Hull], col = "orange1")
#Graphical rendering of concave hull
x <- dkpongo$OES
FootprintVerts <- t(x$vb[1:2, ])
FootprintVerts[, 1] <- FootprintVerts[, 1] - min(FootprintVerts[, 1])
FootprintVerts[, 2] <- FootprintVerts[, 2] - min(FootprintVerts[, 2])
Hull <- concaveman::concaveman(points = FootprintVerts)
plot(x$vb[1, ] - min(x$vb[1, ]), x$vb[2, ] - min(x$vb[2, ]), xlab = "x", ylab = "y")
points(Hull, col = "green1")
rfi(x)
?dkborder
# Compare with vcgBorder from the R package Rvcg, in blue:
pongo_vcgborder <- which(Rvcg::vcgBorder(dkpongo$OES)$borderit == TRUE)
is_border[pongo_vcgborder] <- 3
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE)
is_border <- rep(1, Rvcg::nfaces(dkpongo$OES))
is_border[pongo_border] <- 2
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
pongo_vcgborder <- which(Rvcg::vcgBorder(dkpongo$OES)$borderit == TRUE)
is_border[pongo_vcgborder] <- 3
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE)
pongo_border <- dkborder(dkpongo$OES)
# Map the border in orange:
is_border <- rep(1, Rvcg::nfaces(dkpongo$OES))
is_border[pongo_border] <- 2
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
pongo_vcgborder <- which(Rvcg::vcgBorder(dkpongo$OES)$borderit == TRUE)
is_border[pongo_vcgborder] <- 3
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE)
#As you can see, it all depends on what you want to select!
pongo_border <- dkborder(dkpongo$OES)
# Map the border in orange:
is_border <- rep(1, Rvcg::nfaces(dkpongo$OES))
is_border[pongo_border] <- 2
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00"), col.levels = 2, legend = FALSE,
scalebar = FALSE)
# Compare with vcgBorder from the R package Rvcg, in blue:
pongo_vcgborder <- which(Rvcg::vcgBorder(dkpongo$OES)$borderit == TRUE)
is_border[pongo_vcgborder] <- 3
dkmap(dkpongo$OES, is_border, col = c("white", "#E69F00", "#56B4E9"), col.levels = 3,
legend = FALSE, scalebar = FALSE)
#As you can see, it all depends on what you want to select!
dkmap(x, orient(x), col = "orient", col.levels = 8)
dkmap(x, orient(x), col = "orient", col.levels = 8, legend.type ="pie", orient = "occlusal")
dkmap(x, orient(x), col = "orient", col.levels = 8, legend.type ="pie", orient = "occlusal", legend.lab = "orientation")
dkmap(x, orient(x), col = "orient", col.levels = 8, legend.type ="pie", orient = "occlusal", legend.lab = "orientation")
dkmap(x, dne(x), col = "dne", legend.type ="log", orient = "occlusal", legend.lab = "dne")
?poly.network
mythreshold <- quantile(elev(dkpongo$OES), 0.5)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00",
"#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1)
crests <- poly.network(dkpongo$OES, Rvcg::vcgCurve(dkpongo$OES)$meanitmax,
lwr.limit = quantile(Rvcg::vcgCurve(dkpongo$OES)$meanitmax, 0.8), min.size = 10)
molaR::Slope()
molaR::Slope
doolkit::dkmpap(x, slope(x))
doolkit::dkmap(x, slope(x))
x <- Rvcg::vcgImport(choose.files)
x <- Rvcg::vcgImport(choose.files())
doolkit::dkmap(x, slope(x))
?meshDist
pongo_opc <- opc(dkpongo$OES, rotation = -(360/16))
pongo_opc
sum(pongo_opc$patches$Size)
?Rvcg::nfaces()
?Rvcg::mesh3d()
?rgl::mesh3d()
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.5)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00",
"#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1)
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.5)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00",
"#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1)
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.6)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@@faces] <- cusps@@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00",
"#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1;
legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.6)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@@faces] <- cusps@@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00",
"#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1;
legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.6)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@@faces] <- cusps@@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.6)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.7)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
#Isolate cusps using elevation:
mythreshold <- quantile(elev(dkpongo$OES), 0.4)
cusps <- poly.network(dkpongo$OES, elev(dkpongo$OES), lwr.limit = mythreshold, min.size = 100)
myvector <- rep(0, Rvcg::nfaces(dkpongo$OES))
myvector[cusps@faces] <- cusps@membership[]
myvector <- as.factor(myvector)
ncusps <- length(levels(myvector)) - 1
levels(myvector) <- c(0:ncusps + 1)
dkmap(dkpongo$OES, as.numeric(myvector), col = cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"), col.levels = ncusps + 1, legend.lab = "Elevation (mm)")
?rgl::rgl
?dne
devtools::release()
release()
usethis::use_release_issue()
n
no
usethis::use_release_issue()
no
usethis::use_release_issue()
?doolkit
?`rgl-package`
?rgl
?molaR
?molaR::molaR
usethis::use_release_issue()
usethis::use_readme_md()
usethis::use_readme_rmd()
library(doolkit)
?dkmap
dkmap(dkpongo$OES, doolkit::dne(dkpongo$OES), col = "dne", legend.lab = "DNE")
dkmap(dkpongo$OES, doolkit::dne(dkpongo$OES), col = "dne", legend.lab = "DNE", legend.type = "log")
